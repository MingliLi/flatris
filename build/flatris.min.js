var Flatris={COLORS:{I:"#3cc7d6",O:"#fbb414",T:"#b04497",J:"#3993d0",L:"#ed652f",S:"#95c43d",Z:"#e84138"},SHAPES:{I:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],O:[[1,1],[1,1]],T:[[0,1,0],[1,1,1],[0,0,0]],J:[[1,0,0],[1,1,1],[0,0,0]],L:[[0,0,1],[1,1,1],[0,0,0]],S:[[0,1,1],[1,1,0],[0,0,0]],Z:[[1,1,0],[0,1,1],[0,0,0]]},WELL_ROWS:20,WELL_COLS:10,DROP_FRAMES_DEFAULT:48,DROP_FRAMES_DECREMENT:1.5,DROP_FRAMES_ACCELERATED:1.5,LINE_CLEAR_BONUSES:[100,300,500,800],KEYS:{UP:38,DOWN:40,LEFT:37,RIGHT:39}};Cosmos.components.FlatrisStatePersistor=React.createClass({displayName:"FlatrisStatePersistor",mixins:[Cosmos.mixins.PersistState],children:{flatris:function(){var t=localStorage.getItem("flatrisState");return t?JSON.parse(t):{component:"Flatris"}}},componentDidMount:function(){$(window).on("unload",this.onUnload)},componentWillUnmount:function(){$(window).off("unload",this.onUnload)},render:function(){return this.loadChild("flatris")},onUnload:function(){var t=this.refs.flatris.generateSnapshot(!0);localStorage.setItem("flatrisState",JSON.stringify(t))}}),Cosmos.components.Flatris=React.createClass({displayName:"Flatris",getInitialState:function(){return _.extend(this.getNewGameDefaults(),{playing:!1,nextTetrimino:null})},getNewGameDefaults:function(){return{playing:!0,paused:!0,score:0,lines:0,nextTetrimino:this.getRandomTetriminoType()}},mixins:[Cosmos.mixins.PersistState],children:{well:function(){return{component:"Well",onTetriminoLanding:this.onTetriminoLanding,onFullWell:this.onFullWell}}},start:function(){var t=this.getNewGameDefaults();this.setState(t),this.refs.well.reset(),this.insertNextTetriminoInWell(t.nextTetrimino),this.resume()},pause:function(){this.setState({paused:!0}),this.refs.well.stopAnimationLoop(),this.refs.well.setState({dropAcceleration:!1})},resume:function(){this.setState({paused:!1}),this.refs.well.startAnimationLoop()},render:function(){return React.DOM.div({className:"flatris"},this.loadChild("well"),Cosmos(this.getGamePanelProps()))},getGamePanelProps:function(){return{component:"GamePanel",playing:this.state.playing,paused:this.state.paused,score:this.state.score,lines:this.state.lines,nextTetrimino:this.state.nextTetrimino,onPressStart:this.start,onPressPause:this.pause,onPressResume:this.resume}},componentDidMount:function(){$(window).on("keydown",this.onKeyDown),$(window).on("keyup",this.onKeyUp)},componentWillUnmount:function(){$(window).off("keydown",this.onKeyDown),$(window).off("keyup",this.onKeyUp)},onKeyDown:function(t){if(-1!=_.values(Flatris.KEYS).indexOf(t.keyCode)&&t.preventDefault(),this.state.playing&&!this.state.paused)switch(t.keyCode){case Flatris.KEYS.DOWN:this.refs.well.setState({dropAcceleration:!0});break;case Flatris.KEYS.UP:this.refs.well.rotateTetrimino();break;case Flatris.KEYS.LEFT:this.refs.well.moveTetriminoToLeft();break;case Flatris.KEYS.RIGHT:this.refs.well.moveTetriminoToRight()}},onKeyUp:function(t){this.state.playing&&!this.state.paused&&t.keyCode==Flatris.KEYS.DOWN&&this.refs.well.setState({dropAcceleration:!1})},onTetriminoLanding:function(t){if(this.state.playing){var i=this.state.score,e=this.state.lines,s=Math.floor(e/10)+1;i+=t.hardDrop?2*t.cells:t.cells,t.lines&&(i+=Flatris.LINE_CLEAR_BONUSES[t.lines-1]*s,e+=t.lines),Math.floor(e/10)+1>s&&this.refs.well.state.dropFrames>Flatris.DROP_FRAMES_ACCELERATED&&this.refs.well.increaseSpeed(),this.setState({score:i,lines:e}),this.insertNextTetriminoInWell(this.state.nextTetrimino)}},onFullWell:function(){this.pause(),this.setState({playing:!1,nextTetrimino:null})},insertNextTetriminoInWell:function(t){this.refs.well.loadTetrimino(t),this.setState({nextTetrimino:this.getRandomTetriminoType()})},getRandomTetriminoType:function(){return _.sample(_.keys(Flatris.SHAPES))}}),Cosmos.components.GamePanel=React.createClass({displayName:"GamePanel",getDefaultProps:function(){return{playing:!1,paused:!1,score:0,lines:0,nextTetrimino:null}},render:function(){return React.DOM.div({className:"game-panel"},React.DOM.p({className:"title"},"Flatris"),React.DOM.p({className:"label"},"Score"),React.DOM.p({className:"count"},this.props.score),React.DOM.p({className:"label"},"Lines Cleared"),React.DOM.p({className:"count"},this.props.lines),React.DOM.p({className:"label"},"Next Shape"),React.DOM.div({className:this.getNextTetriminoClass()},this.renderNextTetrimino()),this.renderGameButton())},renderNextTetrimino:function(){var t=this.props.nextTetrimino;if(t)return Cosmos({component:"Tetrimino",color:Flatris.COLORS[t],state:{grid:Flatris.SHAPES[t]}})},renderGameButton:function(){return this.props.playing?this.props.paused?React.DOM.button({onClick:this.props.onPressResume},"Resume"):React.DOM.button({onClick:this.props.onPressPause},"Pause"):React.DOM.button({onClick:this.props.onPressStart},"New game")},getNextTetriminoClass:function(){var t=["next-tetrimino"];return this.props.nextTetrimino&&t.push("next-tetrimino-"+this.props.nextTetrimino),t.join(" ")}}),Cosmos.components.SquareBlock=React.createClass({displayName:"SquareBlock",getDefaultProps:function(){return{color:Flatris.COLORS.L}},render:function(){return React.DOM.div({className:"square-block",style:{backgroundColor:this.props.color}})}}),Cosmos.components.Tetrimino=React.createClass({displayName:"Tetrimino",mixins:[Cosmos.mixins.PersistState],getDefaultProps:function(){return{color:Flatris.COLORS.T}},getInitialState:function(){return{grid:Flatris.SHAPES.T}},rotate:function(){this.setState({grid:this.getRotatedGrid()})},getRotatedGrid:function(){var t,i,e=[],s=this.state.grid.length,o=this.state.grid[0].length;for(t=0;s>t;t++)for(e[t]=[],i=0;o>i;i++)e[t][i]=this.state.grid[o-1-i][t];return e},render:function(){return React.DOM.ul({className:"tetrimino"},this.renderGridBlocks())},renderGridBlocks:function(){var t,i,e=[],s=this.state.grid.length,o=this.state.grid[0].length;for(t=0;s>t;t++)for(i=0;o>i;i++)this.state.grid[t][i]&&e.push(React.DOM.li({className:"grid-square-block",key:t+"-"+i,style:{top:25*t+"%",left:25*i+"%"}},Cosmos({component:"SquareBlock",color:this.props.color})));return e}}),Cosmos.components.Well=React.createClass({displayName:"Well",mixins:[Cosmos.mixins.PersistState,Cosmos.mixins.AnimationLoop],getDefaultProps:function(){return{rows:Flatris.WELL_ROWS,cols:Flatris.WELL_COLS}},getInitialState:function(){return{grid:this.generateEmptyMatrix(),gridBlockCount:0,activeTetrimino:null,activeTetriminoPosition:{x:0,y:0},dropFrames:Flatris.DROP_FRAMES_DEFAULT,dropAcceleration:null}},children:{activeTetrimino:function(){return this.state.activeTetrimino?{component:"Tetrimino",color:Flatris.COLORS[this.state.activeTetrimino]}:void 0}},reset:function(){this.setState({grid:this.generateEmptyMatrix(),dropFrames:Flatris.DROP_FRAMES_DEFAULT}),this.loadTetrimino(null)},loadTetrimino:function(t){this.setState({activeTetrimino:t,activeTetriminoPosition:this.getInitialPositionForTetriminoType(t)})},rotateTetrimino:function(){if(this.state.activeTetrimino){var t=this.refs.activeTetrimino.getRotatedGrid(),i=this.fitTetriminoGridPositionInWellBounds(t,this.state.activeTetriminoPosition);this.isPositionAvailableForTetriminoGrid(t,i)&&this.refs.activeTetrimino.setState({grid:t})}},moveTetriminoToLeft:function(){this.moveTetrimino(-1)},moveTetriminoToRight:function(){this.moveTetrimino(1)},moveTetrimino:function(t){if(this.state.activeTetrimino){var i=this.refs.activeTetrimino.state.grid,e=_.clone(this.state.activeTetriminoPosition);e.x+=t,this.isPositionAvailableForTetriminoGrid(i,e)&&this.setState({activeTetriminoPosition:e})}},increaseSpeed:function(){this.setState({dropFrames:this.state.dropFrames-Flatris.DROP_FRAMES_DECREMENT})},onFrame:function(t){if(this.state.activeTetrimino){var i=this.refs.activeTetrimino.state.grid,e=_.clone(this.state.activeTetriminoPosition),s={hardDrop:this.state.dropAcceleration};e.y+=this.getDropStepForFrames(t),this.isPositionAvailableForTetriminoGrid(i,e)?this.setState({activeTetriminoPosition:e}):(this.setState({activeTetriminoPosition:this.getBottomMostPositionForTetriminoGrid(i,e)}),s.cells=this.transferActiveTetriminoBlocksToGrid(),this.loadTetrimino(null),s.lines=this.clearLines(),"function"==typeof this.props.onTetriminoLanding&&this.props.onTetriminoLanding(s))}},componentDidUpdate:function(t,i){this.state.activeTetrimino&&this.state.activeTetrimino!=i.activeTetrimino&&this.refs.activeTetrimino.setState({grid:Flatris.SHAPES[this.state.activeTetrimino]})},render:function(){return React.DOM.div({className:"well"},React.DOM.div({className:"active-tetrimino",style:_.extend(this.getTetriminoCSSSize(),this.getActiveTetriminoCSSPosition())},this.loadChild("activeTetrimino")),React.DOM.ul({className:"well-grid"},this.renderGridBlocks()))},renderGridBlocks:function(){var t,i,e,s=[],o=100/this.props.cols,r=100/this.props.rows;for(t=0;t<this.props.rows;t++)for(i=0;i<this.props.cols;i++)this.state.grid[t][i]&&(e=this.state.grid[t][i],s.push(React.DOM.li({className:"grid-square-block",key:this.getIdFromBlockValue(e),style:{width:o+"%",height:r+"%",top:t*r+"%",left:i*o+"%"}},Cosmos({component:"SquareBlock",color:this.getColorFromBlockValue(e)}))));return s},generateEmptyMatrix:function(){var t,i,e=[];for(t=0;t<this.props.rows;t++)for(e[t]=[],i=0;i<this.props.cols;i++)e[t][i]=null;return e},getTetriminoCSSSize:function(){return{width:100/this.props.cols*4+"%",height:100/this.props.rows*4+"%"}},getActiveTetriminoCSSPosition:function(){var t=this.getGridPosition(this.state.activeTetriminoPosition);return{top:100/this.props.rows*t.y+"%",left:100/this.props.cols*t.x+"%"}},getGridPosition:function(t){return{x:Math.floor(t.x),y:Math.floor(t.y)}},getInitialPositionForTetriminoType:function(t){if(!t)return{x:0,y:0};var i=Flatris.SHAPES[t];return{x:Math.round(this.props.cols/2)-Math.round(i[0].length/2),y:-2}},getDropStepForFrames:function(t){var i=this.state.dropAcceleration?Flatris.DROP_FRAMES_ACCELERATED:this.state.dropFrames;return t/i},isPositionAvailableForTetriminoGrid:function(t,i){var e,s,o,r,n=this.getGridPosition(i),a=t.length,l=t[0].length;for(e=0;a>e;e++)for(s=0;l>s;s++)if(t[e][s]){if(o=n.y+e,r=n.x+s,0>r||r>=this.props.cols)return!1;if(!(0>o)){if(o>=this.props.rows)return!1;if(this.state.grid[o][r])return!1}}return!0},fitTetriminoGridPositionInWellBounds:function(t,i){var e,s,o,r,n=t.length,a=t[0].length;for(e=0;n>e;e++)for(s=0;a>s;s++)t[e][s]&&(o=i.y+e,r=i.x+s,0>r?i.x-=r:r>=this.props.cols&&(i.x-=r-this.props.cols+1));return i},getBottomMostPositionForTetriminoGrid:function(t,i){for(i.y=Math.floor(i.y);!this.isPositionAvailableForTetriminoGrid(t,i);)i.y-=1;return i},transferActiveTetriminoBlocksToGrid:function(){var t,i,e,s,o=this.refs.activeTetrimino,r=this.getGridPosition(this.state.activeTetriminoPosition),n=o.state.grid.length,a=o.state.grid[0].length,l=this.state.gridBlockCount,c=0,m=!1;for(t=0;n>t;t++)for(i=0;a>i;i++)o.state.grid[t][i]&&(e=r.y+t,s=r.x+i,this.state.grid[e]?(this.state.grid[e][s]=++l+o.props.color,c++):m=!0);return this.setState({grid:this.state.grid,gridBlockCount:l}),m&&"function"==typeof this.props.onFullWell&&this.props.onFullWell(),c},clearLines:function(){var t,i,e,s=0;for(i=this.props.rows-1;i>=0;i--){for(t=!0,e=this.props.cols-1;e>=0;e--)this.state.grid[i][e]||(t=!1);t&&(this.removeGridRow(i),s++,i++)}return this.setState({grid:this.state.grid}),s},removeGridRow:function(t){var i,e;for(i=t;i>=0;i--)for(e=this.props.cols-1;e>=0;e--)this.state.grid[i][e]=i?this.state.grid[i-1][e]:null},getIdFromBlockValue:function(t){return t.split("#")[0]},getColorFromBlockValue:function(t){return"#"+t.split("#")[1]}});